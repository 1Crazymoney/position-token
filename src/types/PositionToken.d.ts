/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PositionTokenInterface extends ethers.utils.Interface {
  functions: {
    "AIRDROP_AMOUNT()": FunctionFragment;
    "WHITELIST_SALE_AMOUNT()": FunctionFragment;
    "aidropDistributed()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "botKeeper()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "distributeAirdrop(address[],uint256)": FunctionFragment;
    "distributeWhitelistSale(address,uint256)": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "excludeAccount(address)": FunctionFragment;
    "genesisBalance(address)": FunctionFragment;
    "genesisReward()": FunctionFragment;
    "getCurrentRTSupply()": FunctionFragment;
    "getRate()": FunctionFragment;
    "includeAccount(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "insuranceFund()": FunctionFragment;
    "isExcluded(address)": FunctionFragment;
    "isGenesisAddress(address)": FunctionFragment;
    "isTransferPaused()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "notifyGenesisAddresses(address[],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "positionStakingManager()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "registerAirdropDistribution()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBotKeeper(address)": FunctionFragment;
    "setGenesisReward(uint256)": FunctionFragment;
    "setInsuranceFund(address)": FunctionFragment;
    "setPositionStakingManager(address)": FunctionFragment;
    "setTransferStatus(bool)": FunctionFragment;
    "setWhitelistSaleContract(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTaxRate()": FunctionFragment;
    "whitelistSaleContract()": FunctionFragment;
    "whitelistSaleDistributed()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AIRDROP_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_SALE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aidropDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "botKeeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeAirdrop",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeWhitelistSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRTSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "includeAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isExcluded", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isGenesisAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyGenesisAddresses",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionStakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAirdropDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBotKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenesisReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionStakingManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistSaleContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSaleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSaleDistributed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AIRDROP_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_SALE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aidropDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "botKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeWhitelistSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRTSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "includeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExcluded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGenesisAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyGenesisAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionStakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAirdropDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenesisReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionStakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistSaleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSaleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSaleDistributed",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BotKeeperChanged(address,address)": EventFragment;
    "Donate(address,uint256)": EventFragment;
    "GenesisRewardChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferStatusChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BotKeeperChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenesisRewardChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStatusChanged"): EventFragment;
}

export class PositionToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionTokenInterface;

  functions: {
    AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHITELIST_SALE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    aidropDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    botKeeper(overrides?: CallOverrides): Promise<[string]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeAirdrop(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeWhitelistSale(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genesisReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentRTSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    includeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    isExcluded(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGenesisAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      _receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyGenesisAddresses(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionStakingManager(overrides?: CallOverrides): Promise<[string]>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerAirdropDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBotKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenesisReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFund(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPositionStakingManager(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferStatus(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistSaleContract(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTaxRate(overrides?: CallOverrides): Promise<[number]>;

    whitelistSaleContract(overrides?: CallOverrides): Promise<[string]>;

    whitelistSaleDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  WHITELIST_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  aidropDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  botKeeper(overrides?: CallOverrides): Promise<string>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeAirdrop(
    _receivers: string[],
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeWhitelistSale(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donate(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeAccount(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genesisReward(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRTSupply(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  includeAccount(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  isExcluded(account: string, overrides?: CallOverrides): Promise<boolean>;

  isGenesisAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferPaused(overrides?: CallOverrides): Promise<boolean>;

  mint(
    _receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyGenesisAddresses(
    _receivers: string[],
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionStakingManager(overrides?: CallOverrides): Promise<string>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerAirdropDistribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBotKeeper(
    _newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenesisReward(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFund(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPositionStakingManager(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferStatus(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistSaleContract(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTaxRate(overrides?: CallOverrides): Promise<number>;

  whitelistSaleContract(overrides?: CallOverrides): Promise<string>;

  whitelistSaleDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    aidropDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    botKeeper(overrides?: CallOverrides): Promise<string>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributeAirdrop(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeWhitelistSale(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    excludeAccount(account: string, overrides?: CallOverrides): Promise<void>;

    genesisBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisReward(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRTSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    includeAccount(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    isExcluded(account: string, overrides?: CallOverrides): Promise<boolean>;

    isGenesisAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferPaused(overrides?: CallOverrides): Promise<boolean>;

    mint(
      _receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyGenesisAddresses(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    positionStakingManager(overrides?: CallOverrides): Promise<string>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAirdropDistribution(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBotKeeper(_newKeeper: string, overrides?: CallOverrides): Promise<void>;

    setGenesisReward(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceFund(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionStakingManager(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferStatus(
      _isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistSaleContract(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTaxRate(overrides?: CallOverrides): Promise<number>;

    whitelistSaleContract(overrides?: CallOverrides): Promise<string>;

    whitelistSaleDistributed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    BotKeeperChanged(
      previousKeeper?: string | null,
      newKeeper?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousKeeper: string; newKeeper: string }
    >;

    Donate(
      sender?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    GenesisRewardChanged(
      previousAmount?: BigNumberish | null,
      newAmount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousAmount: BigNumber; newAmount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    TransferStatusChanged(
      isPaused?: boolean | null
    ): TypedEventFilter<[boolean], { isPaused: boolean }>;
  };

  estimateGas: {
    AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    aidropDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    botKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeAirdrop(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeWhitelistSale(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisReward(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRTSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    includeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    isExcluded(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGenesisAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyGenesisAddresses(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionStakingManager(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAirdropDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBotKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenesisReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceFund(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPositionStakingManager(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferStatus(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistSaleContract(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSaleContract(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSaleDistributed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELIST_SALE_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aidropDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    botKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeAirdrop(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeWhitelistSale(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentRTSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    includeAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExcluded(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGenesisAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyGenesisAddresses(
      _receivers: string[],
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionStakingManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAirdropDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBotKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenesisReward(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFund(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPositionStakingManager(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferStatus(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistSaleContract(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistSaleContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistSaleDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
